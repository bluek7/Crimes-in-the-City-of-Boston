y <- 21:30
x
y
x
x
z
z
x
x
y
source('~/lecture-4-exercises/exercise-1.R', echo=TRUE)
source('~/lecture-4-exercises/exercise-1.R', echo=TRUE)
x
# Create a vector "small" that has the values of "z" that are less than 5
x
y
# Create a vector "small" that has the values of "z" that are less than 5
# Create a vector "large" that has the values of "x" that are greater than or equal to 5
x
y
z
source('~/lecture-4-exercises/exercise-2.R', echo=TRUE)
library(dplyr)
install.packages(jsonlite)
####Jacob Burke
####Info 498f
####February 8th, 2016
####Assignment 5 - Report
#Install Packages--------------------
``` {r, echo=FALSE, message=FALSE}
library(jsonlite)
library(knitr)
library(dplyr)
```
#Using R Markdown-------------------
#Using the GitHub API----------------
#Querying data from GitHub--------
``` {r, echo=FALSE, message=FALSE}
#Creates a variable that stores the name of our GitHub organization, INFO-498F. The rest of the code runs seamlessly if you change the user.
info <- "INFO-988"
access_token <- "a677f678fc141a2692e3617107b6a77aea410cec"
url <- "https://api.github.com/users/"
user_name <- "burkej14"
#Create a variable that contains the data about the user from GitHub.
user_url <- paste0(url, user_name, "?access_token=", access_token)
github_data <- fromJSON(user_url)
#Indicates that you want the repositories sorted in descending order with maximum number of repos being 100
repos <- github_data$repos_url
repo_url <- paste0(repos, "?access_token=", access_token, "&direction=desc", "&per_page=100")
repos_data <- fromJSON(repo_url)
#Flattens user repos data frames and counts how many there are
fattened_repos <- flatten(repos_data)
num_repos <- length(fattened_repos)
#Returns greatest number of forks
most_forked <- fattened_repos %>% filter(forks_count == max(forks_count))
most_popular <- most_forked %>% select(name)
github_data <- fromJSON(user_url)
```
# `r info`
### What is `r info`?
#### This is an R Markdown document that tells the user a little information about himself incluing the username, `r user_name`, the number of resitories the user has, `r num_repos`, and the most popular respository, `r most_popular`.
![`r info`](`r github_data$avatar_url`)
/Users/Jacob/Desktop/avatar_url.jpeg
#Data Manipulation---------------------
```{r, echo=FALSE, message=FALSE}
#Stores the date the repos was created into a readable format
fattened_repos$date <-format(as.Date(fattened_repos$created_at))
#Creates a data.frame that only has the columns we will want in your table
specific_colomns <- data.frame(fattened_repos$name,fattened_repos$description, fattened_repos$date, fattened_repos$size)
#Renames calumns to more 'nice' names
names(specific_colomns)[1] <- "names"
names(specific_colomns)[2] <- "descriptions"
names(specific_colomns)[3] <- "date"
names(specific_colomns)[4] <- "size"
```
#Markdown: Part 2---------------------
### Here is a table showing names, descriptions, date, and the size of the repos of GitHub user burkej14
```{r, echo=FALSE, eval=FALSE, message=FALSE}
kable(fattened_repos, format = "ht")
```
#Creating a summary table----------
```{r, echo=FALSE, message=FALSE}
language_filter <- fattened_repos %>% group_by(language)
summary <- summarise(language_filter, number_repo = nrow(language_filter), average_fork = mean(forks_count, na.rm =  TRUE))
```
View(fattened_repos)
kable(fattened_repos, format = "html")
kable(fattened_repos, format = "html")
kable(fattened_repos, format = "html")
language_filter <- fattened_repos %>% group_by(language)
summary <- summarise(language_filter, number_repo = nrow(language_filter), average_fork = mean(forks_count, na.rm =  TRUE))
kable(fattened_repos, format = "html")
kable(summary, format = "html")
```
kable(specific_colomns, format = "html")
repos_data <- fromJSON(repo_url)
##Here is a summary table showing the number of repos and average forks number for each language
hist(specific_colomns, format = "html")
#hist(specific_colomns, format = "html")
hist(fattened_repos$size, format = "html")
View(fattened_repos)
Size <- fattened_repos
hist(Size, format = "html")
Size <- fattened_repos$size
hist(Size, format = "html")
```{r, echo=FALSE, eval=FALSE message=FALSE}
pie(Size, format = "html")
####Jacob Burke
####Info 498f
####February 8th, 2016
####Assignment 5 - Report
``` {r, echo=FALSE, message=FALSE}
#Install Packages--------------------
library(jsonlite)
library(knitr)
library(dplyr)
```
``` {r, echo=FALSE, message=FALSE}
#Querying data from GitHub--------
#Creates a variable that stores the name of our GitHub organization, INFO-498F. The rest of the code runs seamlessly if you change the user.
info <- "INFO-988"
access_token <- "a677f678fc141a2692e3617107b6a77aea410cec"
url <- "https://api.github.com/users/"
user_name <- "burkej14"
#Create a variable that contains the data about the user from GitHub.
user_url <- paste0(url, user_name, "?access_token=", access_token)
github_data <- fromJSON(user_url)
#Indicates that you want the repositories sorted in descending order with maximum number of repos being 100
repos <- github_data$repos_url
repo_url <- paste0(repos, "?access_token=", access_token, "&direction=desc", "&per_page=100")
repos_data <- fromJSON(repo_url)
#Flattens user repos data frames and counts how many there are
fattened_repos <- flatten(repos_data)
num_repos <- nrow(fattened_repos)
#Returns greatest number of forks
most_forked <- fattened_repos %>% filter(forks_count == max(forks_count))
most_popular <- most_forked %>% select(name)
github_data <- fromJSON(user_url)
#Markdown: Part 1---------------------
```
# `Info498f`
## What is `Info498f`?
#### This is an R Markdown document that tells the user a little information about himself incluing the username, `burkej14`, the number of resitories the user has, `87`, and the most popular respository, `lecture-9-exercise`.
![`r info`](`r github_data$avatar_url`)
```{r, echo=FALSE, message=FALSE}
#Data Manipulation---------------------
#Stores the date the repos was created into a readable format
fattened_repos$date <-format(as.Date(fattened_repos$created_at))
#Creates a data.frame that only has the columns we will want in your table
specific_colomns <- data.frame(fattened_repos$name,fattened_repos$description, fattened_repos$date, fattened_repos$size)
#Renames calumns to more 'nice' names
names(specific_colomns)[1] <- "names"
names(specific_colomns)[2] <- "descriptions"
names(specific_colomns)[3] <- "date"
names(specific_colomns)[4] <- "size"
```
## Here is a table showing names, descriptions, date, and the size of the repos of GitHub user burkej14
```{r, echo=FALSE, message=FALSE}
#Markdown: Part 2---------------------
kable(specific_colomns, format = "html")
```
##Here is a summary table showing the number of repos and average forks number for each language
```{r, echo=FALSE, message=FALSE}
#Creating a summary table----------
language_filter <- fattened_repos %>% group_by(language)
summary <- summarise(language_filter, number_repo = nrow(language_filter), average_fork = mean(forks_count, na.rm =  TRUE))
kable(summary, format = "html")
```
##Here is a histogram of size of the repos of GitHub user burkej14
```{r, echo=FALSE, message=FALSE}
#Bonus---------------------
Size <- fattened_repos$size
hist(Size, format = "html")
```
hist(Size, format = "html")
hist(Size, format = "html")
Size <- fattened_repos$size
Size <- fattened_repos$size
hist(Size)
install.packages("jsonlite")
install.packages("dplyr")
install.packages("knitr")
install.packages("plotly")
library(jsonlite)
library(dplyr)
library(knitr)
library(plotly)
###Summary Infomation-------------------------
#Read in mass shooting data from excel file in assigtnment folder
mass_shooting <-read.csv('/Users/Jacob/Desktop/a6-mapping-shootings/data/Mass-Shooting-Data.csv')
#Create Variables for summary
shootings <- nrow(mass_shooting)
injured <- sum(mass_shooting$injured)
killed <- sum(mass_shooting$killed)
state_shooting <- count(mass_shooting, state)
highest_shooting <- as.character(state_shooting$state[state_shooting$n == max(state_shooting$n)])
#Create summary of variables
summary <- group_by(mass_shooting, state) %>% summarise('Shootings Count' = n(), 'People Injured' = sum(injured), 'People Killed' = sum(killed))
#Creates Summary table of variables
kable(summary, caption = "Summary of Mass Shootings")
least_injured <- mass_shooting$injured[mass_shooting$injured == min(mass_shooting$injured)]
least_killed <- mass_shooting$killed[mass_shooting$killed == min(mass_shooting$killed)]
best_date <- as.character(mass_shooting$date[mass_shooting$killed == min(mass_shooting$killed)])
best_city <- as.character(mass_shooting$city[mass_shooting$killed == min(mass_shooting$killed)])
most_injured <- mass_shooting$injured[mass_shooting$injured == max(mass_shooting$injured)]
most_killed <- mass_shooting$killed[mass_shooting$killed == max(mass_shooting$killed)]
worst_date <- as.character(mass_shooting$date[mass_shooting$killed == max(mass_shooting$killed)])
worst_city <- as.character(mass_shooting$city[mass_shooting$killed == max(mass_shooting$killed)])
```
## A Description of the worst shooting incident of 2015
#### On the cold of `r worst_date` in `worst_city` a huge mass shooting occured.  It was the worst shooting of all of 2015 with `r most_injured` people getting injured, but `r most_killed` people dying.  Salute to these people, let they rest in peace as our hearts go out to them.
```{r, echo=FALSE}
#An interactive map----------------------------------
#Creates an interactive map of mass shooting
mass_shooting$hover <- paste(mass_shooting$date, mass_shooting$city, "<br>Injured: ", mass_shooting$injured, "<br>Killed: ", mass_shooting$killed)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("blue"),
countrycolor = toRGB("yellow")
)
plot_ly(mass_shooting, lon = lng, lat = lat, text = hover,
marker = list(size = (killed + injured) * 1.5),
color = killed, type = 'scattergeo', locationmode = 'USA-states') %>%
layout(title = 'US 2015 Mass Shootings', geo = g)
#An interactive plot of your choice---------------------
#Creates a plot of mass shootings
plot_ly(mass_shooting, x = killed, y = injured, size = ((killed + injured) * .5), mode = "markers",
color = killed, text = hover) %>% layout(title = 'How many Deaths per Injury in US Mass Shootings 2015', geo = g)
install.packages('json')
library(json)
library(jsonlite)
install.packages('json')
install.packages('jsonlite')
install.packages("jsonlite")
library(jsonlite)
Jacob Burke, Jon Jewik, Kush Gupta, Michael Lew
Info498f
Assignment 7: Collaborative Coding
---
title: "Assignment 7: Intro Survey Data Analysis"
output: html_document
---
[intro paragraph goes here, tell what the stuff below does]
```{r eval=TRUE, echo=FALSE, message=FALSE}
library(jsonlite)
library(plotly)
library(dplyr)
#Read in data (the file in data/ wasn't made public so that won't work)
data <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-survey-data/master/intro_survey_data.csv")
#____________________________________
#1) Summary statistics
source("scripts/summary_statistics.R")
sl <- summarise_data(data)
# Expected value of summary_list:
#   numbers indicate degree, like class_standing1 indicates Freshman, 2=sophomore, 3=junior, 4=senior,
#   programming_experience1 = no experience, 2=some experience, 3=moderate experience, 4=lots of experience
#        students_enrolled           class_standing1           class_standing2
#                     "81"                      "15"                      "41"
#          class_standing3           class_standing4   programming_experience1
#                     "18"                       "7"                       "3"
#  programming_experience2   programming_experience3   programming_experience4
#                     "29"                      "46"                       "3"
#  total_countries_visited average_countries_visited
#                    "434"                    "5.36"
# Here's a link to reference to getting stuff from a list:
# http://www.r-tutor.com/r-introduction/list/named-list-members
```
#Summary paragraph about the Info Survey
Of `r sl$students_enrolled` people enrolled in INFO498F, `r sl$class_standing1` were Freshmen, `r sl$class_standing2` were Sophomores, `r sl$class_standing3` were Juniors, and `r sl$class_standing4` were Seniors.
`r sl$programming_experience1` enrolled students said that they had never coded before, `r sl$programming_experience2` said they had only experimented with code, `r sl$programming_experience3` had a moderate amount of programming experience, and `r sl$programming_experience4` had lots of programming experience.
All students put together had visited a total of `r sl$total_countries_visited` countries (not exclusive); each student has visited an average of `r sl$average_countries_visited` countries.
```{r eval=TRUE, echo=FALSE, message=FALSE}
#____________________________________
#2) Charting function 1
# [insert source("scripts/filename") here]
# [function from that file goes here]
#____________________________________
#3) Charting function 2
# [insert source("scripts/filename") here]
# [function from that file goes here]
```
View(data)
View(data)
counts <- table(data$What.is.your.current.class.standing.)
counts <- table(data$What.is.your.current.class.standing.)
barplot(counts, main="Class Standing in Info 498f",
xlab="Class Standing")
xlab="Class Standing", col=c("darkblue","red"))
# Grouped Bar Plot
# Simple Bar Plot
counts <- table(data$What.is.your.current.class.standing.)
barplot(counts, main="Class Standing in Info 498f",
xlab="Class Standing", col=c("darkblue","red"))
# Grouped Bar Plot
# Simple Bar Plot
counts <- table(data$What.is.your.current.class.standing.)
barplot(counts, main="Class Standing in Info 498f",
xlab="Class Standing", col=c("darkblue","red", "yellow", "green"))
counts <- table(data$What.is.your.current.class.standing.)
barplot(counts, main="Class Standing in Info 498f",
xlab="Class Standing", col=c("darkblue","red", "yellow", "green")
setwd("~/Desktop")
data <- read.csv("Boston_Police_Department_FIO.csv")
data <- read.csv("Boston_Police_Department_FIO.csv")
View(data)
> data <- read.csv("Boston_Police_Department_FIO.csv")
> data <- read.csv("Boston_Police_Department_FIO.csv")
data <- read.csv("Boston_Police_Department_FIO.csv")
setwd("~/Desktop/Final Project")
data <- read.csv("Boston_Police_Department_FIO.csv")
data <- read.csv("Boston_Police_Department_FIO.csv")
data <- read.csv("Boston_Police_Department_FIO.csv")
shiny::runApp()
shiny::runApp()
install.packages("shiny")
install.packages("shiny")
library(shiny)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
dataAge <- read.csv("stops_by_age_group.csv")
dataRace <- read.csv("Boston_Police_Department_FIO.csv")
dataSex <- read.csv("Boston_Police_Department_FIO.csv")
dataYear <- read.csv("Boston_Police_Department_FIO.csv")
cd desktop
setwd desktop
setwd Desktop
setwd("Desktop")
setwd("~/Desktop")
setwd("~/Desktop/Crimes-in-the-City-of-Boston/data")
dataAge <- read.csv("stops_by_age_group.csv")
dataRace <- read.csv("stops_by_race.csv")
dataSex <- read.csv("stops_by_sex.csv")
dataYear <- read.csv("stops_by_year.csv")
shiny::runApp('~/Desktop/Final Project')
shiny::runApp('~/Desktop/Final Project')
View(dataAge)
View(dataRace)
View(dataSex)
View(dataYear)
shiny::runApp('~/Desktop/Final Project')
shiny::runApp('~/Desktop/Final Project')
shiny::runApp('~/Desktop/Final Project')
shiny::runApp('~/Desktop/Final Project')
